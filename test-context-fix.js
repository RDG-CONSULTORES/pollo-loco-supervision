const IntelligentContextManager = require('./telegram-bot/intelligent-context-manager');
const LLMManager = require('./telegram-bot/llm-manager');

async function testContextFix() {
    console.log('üß† TESTING CONTEXT FIX - TEPEYAC vs EPL SO');
    
    try {
        const llm = new LLMManager();
        const contextManager = new IntelligentContextManager(llm);
        
        const testChatId = 'test_user_tepeyac';
        
        // 1. Simular que el usuario ya complet√≥ onboarding con TEPEYAC
        console.log('\n1Ô∏è‚É£ Simulando perfil de usuario con TEPEYAC configurado...');
        
        const userProfile = {
            userType: 'supervisor',
            primaryGroup: 'TEPEYAC',
            region: 'norte',
            interests: ['todo'],
            onboardingCompleted: true
        };
        
        // Crear conversaci√≥n con perfil
        contextManager.conversations.set(testChatId, {
            history: [],
            lastGroup: null,
            userProfile: userProfile,
            lastUpdate: new Date()
        });
        
        console.log('‚úÖ Usuario configurado:', userProfile);
        
        // 2. Test pregunta ambigua que debe usar TEPEYAC
        console.log('\n2Ô∏è‚É£ Testing pregunta ambigua: "¬øc√≥mo vamos?"');
        
        const contextData = await contextManager.analyzeQuestionContext(
            "¬øc√≥mo vamos?",
            testChatId,
            []
        );
        
        console.log('\nüìä RESULTADO DEL AN√ÅLISIS:');
        console.log('- Grupo detectado:', contextData.detectedGroup);
        console.log('- Grupo del contexto:', contextData.groupFromContext);
        console.log('- Grupo principal:', contextData.primaryGroup);
        console.log('- GRUPO FINAL:', contextData.finalGroup);
        console.log('- Confianza:', contextData.confidence);
        console.log('- Razonamiento:', contextData.reasoning);
        
        // 3. Verificaci√≥n
        if (contextData.finalGroup === 'TEPEYAC') {
            console.log('\n‚úÖ √âXITO: Ana us√≥ TEPEYAC correctamente (grupo principal del usuario)');
        } else {
            console.log('\n‚ùå ERROR: Ana us√≥', contextData.finalGroup, 'en lugar de TEPEYAC');
            console.log('   Este es el bug que estamos arreglando');
        }
        
        // 4. Test adicional con pregunta espec√≠fica
        console.log('\n3Ô∏è‚É£ Testing pregunta espec√≠fica sobre otro grupo');
        const specificContext = await contextManager.analyzeQuestionContext(
            "¬øc√≥mo va OGAS?",
            testChatId,
            []
        );
        
        console.log('\nüìä RESULTADO PREGUNTA ESPEC√çFICA:');
        console.log('- GRUPO FINAL:', specificContext.finalGroup, '(deber√≠a ser OGAS)');
        
        if (specificContext.finalGroup === 'OGAS') {
            console.log('‚úÖ Correcto: Ana detect√≥ OGAS espec√≠fico');
        } else {
            console.log('‚ùå Error: No detect√≥ OGAS espec√≠fico');
        }
        
        console.log('\nüéØ CONTEXTO MANAGER MEJORADO PROBADO');
        
    } catch (error) {
        console.error('‚ùå Error en test:', error.message);
        if (error.message.includes('OPENAI_API_KEY')) {
            console.log('\n‚ö†Ô∏è  Sin OpenAI API KEY - Solo se puede probar el fallback');
            
            // Test fallback
            const llm = new LLMManager();
            const contextManager = new IntelligentContextManager(llm);
            
            // Simular perfil
            contextManager.conversations.set('test', {
                userProfile: { primaryGroup: 'TEPEYAC' }
            });
            
            const fallbackResult = contextManager.getFallbackContext("¬øc√≥mo vamos?", 'test');
            console.log('Fallback result:', fallbackResult.finalGroup);
            
            if (fallbackResult.finalGroup === 'TEPEYAC') {
                console.log('‚úÖ FALLBACK FUNCIONA: Usa TEPEYAC del perfil');
            }
        }
    }
}

testContextFix();