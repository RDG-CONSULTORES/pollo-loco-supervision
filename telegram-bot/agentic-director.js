// AGENTIC DIRECTOR - Coordinador Inteligente de Conversaciones
const { Pool } = require('pg');
const UltraIntelligenceEngine = require('./ultra-intelligence-engine');
const DynamicQueryEngine = require('./dynamic-query-engine');

class AgenticDirector {
  constructor(pool, knowledgeBase, intelligentSystem) {
    this.pool = pool;
    this.knowledgeBase = knowledgeBase;
    this.intelligentSystem = intelligentSystem;
    
    // ULTRA INTELLIGENCE SYSTEM - Ana 120% knowledge
    this.ultraIntelligence = new UltraIntelligenceEngine(pool);
    this.dynamicQuery = new DynamicQueryEngine(pool, this.ultraIntelligence);
    this.isTraining = false;
    this.trainingComplete = false;
    
    // MEMORY CONVERSACIONAL
    this.conversationMemory = new Map();
    
    // PERSONALITY ENGINE - ENHANCED
    this.personality = {
      name: "Ana",
      role: "Tu analista experta ultra-inteligente de El Pollo Loco",
      tone: "amigable_profesional",
      expertise: "supervision_operativa",
      language: "espa√±ol_mexicano",
      intelligence_level: "ultra_advanced",
      database_knowledge: "120%",
      capabilities: [
        "an√°lisis_din√°mico_completo",
        "tendencias_predictivas", 
        "recomendaciones_cas_inteligentes",
        "consultas_ilimitadas_bd",
        "contexto_empresarial_completo"
      ]
    };
    
    // Initialize ultra intelligence on startup
    this.initializeUltraIntelligence();
  }

  async initializeUltraIntelligence() {
    if (this.trainingComplete) return;
    
    try {
      console.log('üöÄ INICIANDO SISTEMA ULTRA INTELIGENTE ANA...');
      this.isTraining = true;
      
      // Set a 30 second timeout for training
      const trainingTimeout = setTimeout(() => {
        if (this.isTraining) {
          console.log('‚è±Ô∏è Timeout de entrenamiento - activando modo AGENTIC');
          this.isTraining = false;
          this.trainingComplete = false;
        }
      }, 30000); // 30 segundos m√°ximo
      
      // Train Ana with complete database knowledge with proper error handling
      const trainingResult = await this.ultraIntelligence.executeCompleteTraining();
      
      clearTimeout(trainingTimeout);
      
      if (trainingResult) {
        this.trainingComplete = true;
        console.log('‚úÖ ANA ULTRA INTELIGENTE LISTA - 120% conocimiento de la base de datos');
      } else {
        console.log('‚ö†Ô∏è Entrenamiento parcial - Ana funcionar√° con capacidades b√°sicas');
        this.trainingComplete = false;
      }
      
      this.isTraining = false;
      
    } catch (error) {
      console.error('‚ùå Error inicializando ultra inteligencia:', error);
      console.log('üîÑ Ana funcionar√° con sistema AGENTIC de fallback');
      this.isTraining = false;
      this.trainingComplete = false;
    }
  }

  async processUserQuestion(question, chatId) {
    console.log(`üß† ANA ULTRA INTELIGENTE procesando: "${question}"`);
    
    // Wait maximum 5 seconds for training
    if (this.isTraining) {
      console.log('‚è≥ Esperando entrenamiento... m√°ximo 5 segundos');
      let waitTime = 0;
      while (this.isTraining && waitTime < 5000) {
        await new Promise(resolve => setTimeout(resolve, 100));
        waitTime += 100;
      }
      
      if (this.isTraining) {
        console.log('‚è±Ô∏è Timeout esperando entrenamiento - usando AGENTIC fallback');
        this.isTraining = false; // Force stop training flag
      }
    }
    
    // Use DYNAMIC QUERY ENGINE for unlimited database queries
    try {
      // 1. AN√ÅLISIS ULTRA INTELIGENTE con Dynamic Query Engine
      console.log('üéØ Usando Dynamic Query Engine para consulta ilimitada');
      const dynamicResponse = await this.dynamicQuery.processDynamicQuery(question, { chatId });
      
      // 2. GUARDAR EN MEMORIA
      this.saveConversationMemory(chatId, question, dynamicResponse, { type: 'dynamic_query' });
      
      return dynamicResponse;
      
    } catch (error) {
      console.error('‚ùå Error en consulta din√°mica, usando fallback:', error);
      
      // FALLBACK: Use original AGENTIC system
      return await this.processFallbackQuestion(question, chatId);
    }
  }
  
  async processFallbackQuestion(question, chatId) {
    console.log(`üîÑ FALLBACK AGENTIC procesando: "${question}"`);
    
    // 1. ANALIZAR INTENT REAL
    const realIntent = await this.analyzeRealIntent(question);
    console.log(`üéØ Intent Real Detectado:`, realIntent);
    
    // 2. OBTENER DATOS ESPEC√çFICOS
    const specificData = await this.getSpecificData(realIntent);
    
    // 3. GENERAR RESPUESTA NATURAL
    const naturalResponse = await this.generateNaturalResponse(realIntent, specificData, question);
    
    // 4. GUARDAR EN MEMORIA
    this.saveConversationMemory(chatId, question, naturalResponse, realIntent);
    
    return naturalResponse;
  }

  async analyzeRealIntent(question) {
    const lower = question.toLowerCase();
    
    // DETECCI√ìN ESPEC√çFICA DE SUCURSALES POR GRUPO
    if (lower.includes('sucursales') && (lower.includes('tepeyac') || lower.includes('ogas') || lower.includes('tec'))) {
      const grupoDetected = this.extractGrupoName(lower);
      return {
        type: 'sucursales_by_grupo',
        grupo: grupoDetected,
        needs_evolution: lower.includes('evoluci√≥n') || lower.includes('evolucion') || lower.includes('trimestre'),
        wants_specific: true,
        context: 'user_wants_branch_details'
      };
    }
    
    // DETECCI√ìN DE √ÅREAS DE OPORTUNIDAD
    if (lower.includes('oportunidad') || lower.includes('areas') || lower.includes('mejorar')) {
      const grupoDetected = this.extractGrupoName(lower);
      return {
        type: 'areas_oportunidad',
        grupo: grupoDetected,
        wants_specific: true,
        context: 'improvement_focus'
      };
    }
    
    // DETECCI√ìN DE RANKINGS
    if (lower.includes('top') || lower.includes('ranking') || lower.includes('mejor')) {
      const quantity = this.extractQuantity(lower);
      return {
        type: 'ranking_grupos',
        quantity: quantity,
        wants_comparison: true,
        context: 'performance_comparison'
      };
    }
    
    // DETECCI√ìN DE ESTADO/UBICACI√ìN
    if (lower.includes('estado') || lower.includes('donde esta') || lower.includes('ubicaci√≥n') || lower.includes('ubicacion')) {
      const grupoDetected = this.extractGrupoName(lower);
      return {
        type: 'grupo_location',
        grupo: grupoDetected,
        wants_location: true,
        context: 'location_inquiry'
      };
    }
    
    // DETECCI√ìN DE CALIFICACIONES/DESEMPE√ëO
    if (lower.includes('calificacion') || lower.includes('calificaci√≥n') || lower.includes('desempe√±o') || lower.includes('desempeno')) {
      const grupoDetected = this.extractGrupoName(lower);
      return {
        type: 'grupo_performance',
        grupo: grupoDetected,
        wants_scores: true,
        context: 'performance_inquiry'
      };
    }
    
    return {
      type: 'general_inquiry',
      context: 'needs_clarification'
    };
  }
  
  extractGrupoName(text) {
    // TODOS LOS 20 GRUPOS OPERATIVOS de la base de conocimiento
    const grupos = [
      'OGAS', 'PLOG QUERETARO', 'EPL SO', 'TEC', 'TEPEYAC', 'GRUPO MATAMOROS',
      'PLOG LAGUNA', 'EFM', 'RAP', 'GRUPO RIO BRAVO', 'PLOG NUEVO LEON',
      'GRUPO PIEDRAS NEGRAS', 'GRUPO CANTERA ROSA (MORELIA)', 'EXPO',
      'OCHTER TAMPICO', 'GRUPO SABINAS HIDALGO', 'GRUPO CENTRITO', 'CRR',
      'GRUPO NUEVO LAREDO (RUELAS)', 'GRUPO SALTILLO'
    ];
    
    // B√∫squeda exacta primero
    for (const grupo of grupos) {
      if (text.includes(grupo.toLowerCase()) || text.includes(grupo)) {
        return grupo;
      }
    }
    
    // Detecciones espec√≠ficas por palabras clave
    const lower = text.toLowerCase();
    
    // Grupos con nombres √∫nicos
    if (lower.includes('ogas')) return 'OGAS';
    if (lower.includes('tepeyac')) return 'TEPEYAC';
    if (lower.includes('tec') && !lower.includes('ochter')) return 'TEC';
    if (lower.includes('expo')) return 'EXPO';
    if (lower.includes('efm')) return 'EFM';
    if (lower.includes('rap') && !lower.includes('rap') === false) return 'RAP';
    if (lower.includes('crr')) return 'CRR';
    
    // Grupos con "PLOG"
    if (lower.includes('queretaro') || lower.includes('quer√©taro')) return 'PLOG QUERETARO';
    if (lower.includes('laguna')) return 'PLOG LAGUNA';
    if (lower.includes('nuevo leon') || lower.includes('nuevo le√≥n')) return 'PLOG NUEVO LEON';
    
    // Grupos con "GRUPO"
    if (lower.includes('matamoros') && lower.includes('grupo')) return 'GRUPO MATAMOROS';
    if (lower.includes('saltillo')) return 'GRUPO SALTILLO';
    if (lower.includes('centrito')) return 'GRUPO CENTRITO';
    if (lower.includes('rio bravo')) return 'GRUPO RIO BRAVO';
    if (lower.includes('piedras negras')) return 'GRUPO PIEDRAS NEGRAS';
    if (lower.includes('nuevo laredo') || lower.includes('ruelas')) return 'GRUPO NUEVO LAREDO (RUELAS)';
    if (lower.includes('sabinas hidalgo')) return 'GRUPO SABINAS HIDALGO';
    if (lower.includes('cantera rosa') || lower.includes('morelia')) return 'GRUPO CANTERA ROSA (MORELIA)';
    
    // Grupos con nombres √∫nicos adicionales
    if (lower.includes('ochter') || lower.includes('tampico')) return 'OCHTER TAMPICO';
    if (lower.includes('epl so')) return 'EPL SO';
    
    // Fallback - palabras sueltas comunes
    if (lower.includes('matamoros') && !lower.includes('grupo')) return 'GRUPO MATAMOROS';
    
    console.log(`‚ö†Ô∏è No se detect√≥ grupo en: "${text}"`);
    return null;
  }
  
  extractQuantity(text) {
    const match = text.match(/top\s*(\d+)|(\d+)\s*mejores/);
    if (match) return parseInt(match[1] || match[2]);
    return 5; // Default
  }

  async getSpecificData(intent) {
    switch (intent.type) {
      case 'sucursales_by_grupo':
        return await this.getSucursalesByGrupo(intent.grupo, intent.needs_evolution);
        
      case 'areas_oportunidad':
        return await this.getAreasOportunidad(intent.grupo);
        
      case 'ranking_grupos':
        return await this.getRankingData(intent.quantity);
        
      case 'grupo_location':
        return await this.getGrupoLocation(intent.grupo);
        
      case 'grupo_performance':
        return await this.getGrupoPerformance(intent.grupo);
        
      default:
        return { message: 'Necesito m√°s contexto para ayudarte mejor' };
    }
  }

  async getSucursalesByGrupo(grupoName, needsEvolution) {
    try {
      console.log(`üè™ Buscando sucursales del grupo: ${grupoName}`);
      
      const query = `
        SELECT DISTINCT 
          sucursal_clean,
          grupo_operativo,
          estado,
          DATE_TRUNC('quarter', fecha_supervision) as quarter,
          EXTRACT(QUARTER FROM fecha_supervision) as quarter_num,
          EXTRACT(YEAR FROM fecha_supervision) as year,
          COUNT(*) as supervisiones,
          AVG(porcentaje) as promedio
        FROM supervision_operativa_detalle
        WHERE UPPER(grupo_operativo) = UPPER($1)
          AND fecha_supervision >= '2025-01-01'
          AND porcentaje IS NOT NULL
        GROUP BY sucursal_clean, grupo_operativo, estado, quarter, quarter_num, year
        ORDER BY year, quarter_num, sucursal_clean;
      `;
      
      const result = await this.pool.query(query, [grupoName]);
      
      if (result.rows.length === 0) {
        return {
          found: false,
          grupo: grupoName,
          message: `No encontr√© datos de supervisi√≥n para el grupo ${grupoName} en 2025`
        };
      }
      
      // Organizar por sucursal y trimestre
      const sucursalesData = {};
      
      result.rows.forEach(row => {
        const sucursal = row.sucursal_clean;
        if (!sucursalesData[sucursal]) {
          sucursalesData[sucursal] = {
            nombre: sucursal,
            estado: row.estado,
            trimestres: {}
          };
        }
        
        const quarterKey = `Q${row.quarter_num}_${row.year}`;
        sucursalesData[sucursal].trimestres[quarterKey] = {
          quarter: `Q${row.quarter_num}`,
          year: row.year,
          supervisiones: parseInt(row.supervisiones),
          promedio: parseFloat(row.promedio).toFixed(2)
        };
      });
      
      return {
        found: true,
        grupo: grupoName,
        sucursales: Object.values(sucursalesData),
        total_sucursales: Object.keys(sucursalesData).length,
        needs_evolution: needsEvolution
      };
      
    } catch (error) {
      console.error('‚ùå Error obteniendo sucursales:', error);
      return {
        found: false,
        error: error.message,
        grupo: grupoName
      };
    }
  }

  async getAreasOportunidad(grupoName) {
    return await this.intelligentSystem.getGroupOpportunities(grupoName, 'Q3', 5);
  }

  async getRankingData(quantity) {
    return await this.intelligentSystem.getTopGrupos('Q3', quantity);
  }

  async getGrupoLocation(grupoName) {
    if (!grupoName) {
      return { 
        found: false, 
        message: 'No especificaste qu√© grupo te interesa. ¬øCu√°l grupo buscas?' 
      };
    }

    try {
      console.log(`üìç Buscando ubicaci√≥n del grupo: ${grupoName}`);
      
      const query = `
        SELECT DISTINCT 
          grupo_operativo,
          estado,
          COUNT(DISTINCT sucursal_clean) as sucursales_count,
          AVG(porcentaje) as promedio_general
        FROM supervision_operativa_detalle
        WHERE UPPER(grupo_operativo) = UPPER($1)
          AND fecha_supervision >= '2025-01-01'
          AND porcentaje IS NOT NULL
        GROUP BY grupo_operativo, estado
        ORDER BY estado;
      `;
      
      const result = await this.pool.query(query, [grupoName]);
      
      if (result.rows.length === 0) {
        return {
          found: false,
          grupo: grupoName,
          message: `No encontr√© datos de ubicaci√≥n para el grupo ${grupoName}`
        };
      }
      
      return {
        found: true,
        grupo: grupoName,
        estados: result.rows.map(row => ({
          estado: row.estado,
          sucursales: parseInt(row.sucursales_count),
          promedio: parseFloat(row.promedio_general).toFixed(2)
        })),
        total_estados: result.rows.length
      };
      
    } catch (error) {
      console.error('‚ùå Error obteniendo ubicaci√≥n:', error);
      return {
        found: false,
        error: error.message,
        grupo: grupoName
      };
    }
  }

  async getGrupoPerformance(grupoName) {
    if (!grupoName) {
      return { 
        found: false, 
        message: 'No especificaste qu√© grupo te interesa. ¬øCu√°l grupo quieres analizar?' 
      };
    }

    try {
      console.log(`üìä Analizando desempe√±o del grupo: ${grupoName}`);
      
      // Obtener datos de oportunidades (que incluye contexto de negocio)
      const opportunities = await this.intelligentSystem.getGroupOpportunities(grupoName, 'Q3', 3);
      
      // Obtener contexto de negocio
      const businessContext = this.knowledgeBase.getGrupoIntelligence(grupoName);
      
      return {
        found: true,
        grupo: grupoName,
        opportunities: opportunities.opportunities || [],
        businessContext: businessContext,
        performance_data: opportunities
      };
      
    } catch (error) {
      console.error('‚ùå Error obteniendo desempe√±o:', error);
      return {
        found: false,
        error: error.message,
        grupo: grupoName
      };
    }
  }

  async generateNaturalResponse(intent, data, originalQuestion) {
    switch (intent.type) {
      case 'sucursales_by_grupo':
        return this.generateSucursalesResponse(data, originalQuestion);
        
      case 'areas_oportunidad':
        return this.generateOpportunidadesResponse(data);
        
      case 'ranking_grupos':
        return this.generateRankingResponse(data);
        
      case 'grupo_location':
        return this.generateLocationResponse(data, originalQuestion);
        
      case 'grupo_performance':
        return this.generatePerformanceResponse(data, originalQuestion);
        
      default:
        return this.generateHelpResponse(originalQuestion);
    }
  }

  generateSucursalesResponse(data, originalQuestion) {
    if (!data.found) {
      return `ü§î Disculpa, pero no pude encontrar datos espec√≠ficos de supervisi√≥n para el grupo **${data.grupo}** en 2025.

¬øTe refieres a alg√∫n otro grupo? Los que tengo con m√°s datos son:
‚Ä¢ OGAS (nuestro grupo estrella)
‚Ä¢ TEPEYAC (grupo grande con buena cobertura) 
‚Ä¢ TEC (rendimiento s√≥lido)

¬°Preg√∫ntame por cualquiera de estos! üòä`;
    }

    let response = `üè™ **Sucursales del Grupo ${data.grupo.toUpperCase()}**\n\n`;
    response += `¬°Perfecto! Te muestro las **${data.total_sucursales} sucursales** de ${data.grupo} con su evoluci√≥n:\n\n`;
    
    data.sucursales.forEach((sucursal, index) => {
      response += `**${index + 1}. ${sucursal.nombre}** (${sucursal.estado})\n`;
      
      // Mostrar evoluci√≥n por trimestre
      const quarters = ['Q1_2025', 'Q2_2025', 'Q3_2025'];
      const evolution = [];
      
      quarters.forEach(q => {
        if (sucursal.trimestres[q]) {
          const t = sucursal.trimestres[q];
          evolution.push(`${t.quarter}: ${t.promedio}% (${t.supervisiones} sup.)`);
        } else {
          evolution.push(`${q.substring(0,2)}: Sin datos`);
        }
      });
      
      response += `   ${evolution.join(' ‚Ä¢ ')}\n\n`;
    });
    
    response += `üí° **Mi an√°lisis:** ${data.grupo} tiene una red de ${data.total_sucursales} sucursales activas. `;
    
    // Agregar insights espec√≠ficos
    const conDatos = data.sucursales.filter(s => Object.keys(s.trimestres).length > 0).length;
    const sinDatos = data.total_sucursales - conDatos;
    
    if (sinDatos > 0) {
      response += `Noto que ${sinDatos} sucursales a√∫n no tienen supervisiones en algunos trimestres - podr√≠amos enfocar ah√≠ las pr√≥ximas evaluaciones.`;
    } else {
      response += `¬°Excelente cobertura de supervisiones en toda la red!`;
    }
    
    response += `\n\n¬øTe gustar√≠a que analice alguna sucursal espec√≠fica o comparemos el desempe√±o entre ellas? ü§î`;
    
    return response;
  }

  generateOpportunidadesResponse(data) {
    if (!data.opportunities || data.opportunities.length === 0) {
      return `ü§î No encontr√© √°reas de oportunidad espec√≠ficas para **${data.grupo}** en este per√≠odo.

Esto podr√≠a significar que:
‚Ä¢ El grupo est√° funcionando muy bien ‚ú®
‚Ä¢ No hay datos suficientes para el an√°lisis
‚Ä¢ Necesitamos revisar un trimestre diferente

¬øTe gustar√≠a que verifique otro per√≠odo o grupo? üòä`;
    }

    let response = `üéØ **Oportunidades de Mejora para ${data.grupo.toUpperCase()}**\n\n`;
    response += `Como tu analista, identifiqu√© estas √°reas donde ${data.grupo} puede brillar a√∫n m√°s:\n\n`;
    
    data.opportunities.forEach((opp, index) => {
      const emoji = index === 0 ? 'üî¥' : index === 1 ? 'üü°' : 'üü†';
      response += `${emoji} **${opp.area}**\n`;
      response += `   üìä Promedio actual: ${opp.promedio}%\n`;
      response += `   üìà Rango: ${opp.rango}\n`;
      response += `   üìã Basado en ${opp.evaluaciones} evaluaciones\n\n`;
    });
    
    const worst = data.opportunities[0];
    response += `üí° **Mi recomendaci√≥n:** Enfocar√≠a el primer esfuerzo en **${worst.area}** `;
    response += `porque con ${worst.promedio}% tiene el mayor potencial de mejora. `;
    response += `Con solo subir 5-10 puntos ah√≠, el impacto general ser√° significativo.\n\n`;
    response += `¬øTe ayudo a crear un plan de acci√≥n espec√≠fico para estas √°reas? üöÄ`;
    
    return response;
  }

  generateRankingResponse(data) {
    if (!data.ranking || data.ranking.length === 0) {
      return `ü§î No pude obtener el ranking actual. ¬°D√©jame revisar la base de datos!

¬øPodr√≠as preguntarme en unos minutos? O si prefieres, puedo ayudarte con algo espec√≠fico de alg√∫n grupo en particular üòä`;
    }

    let response = `üèÜ **Top ${data.ranking.length} Grupos - Mi Ranking Actualizado**\n\n`;
    response += `¬°Aqu√≠ tienes nuestros grupos estrella! Como tu analista, esto es lo que veo:\n\n`;
    
    data.ranking.forEach((grupo, index) => {
      const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÜ';
      const trend = grupo.promedio >= 95 ? 'üî•' : grupo.promedio >= 90 ? '‚ú®' : grupo.promedio >= 85 ? 'üëç' : '‚ö†Ô∏è';
      
      response += `${medal} **${grupo.grupo}** ${trend}\n`;
      response += `   üìä ${grupo.promedio}% promedio\n`;
      response += `   üè™ ${grupo.sucursales} sucursales evaluadas\n\n`;
    });
    
    const leader = data.ranking[0];
    const gap = parseFloat(leader.promedio) - parseFloat(data.ranking[1]?.promedio || 0);
    
    response += `üí° **Mi an√°lisis r√°pido:**\n`;
    response += `‚Ä¢ **${leader.grupo}** domina con ${gap.toFixed(1)} puntos de ventaja\n`;
    
    const excellent = data.ranking.filter(g => parseFloat(g.promedio) >= 95).length;
    const good = data.ranking.filter(g => parseFloat(g.promedio) >= 85 && parseFloat(g.promedio) < 95).length;
    
    response += `‚Ä¢ ${excellent} grupos en nivel excelente (95%+)\n`;
    response += `‚Ä¢ ${good} grupos en nivel bueno (85-94%)\n\n`;
    response += `¬øTe interesa que profundice en alg√∫n grupo espec√≠fico? ü§î`;
    
    return response;
  }

  generateLocationResponse(data, originalQuestion) {
    if (!data.found) {
      return `ü§î No pude encontrar informaci√≥n de ubicaci√≥n para **${data.grupo}**.

Esto podr√≠a ser porque:
‚Ä¢ El nombre no est√° exactamente como est√° en la base de datos
‚Ä¢ No hay datos de supervisi√≥n recientes para este grupo
‚Ä¢ ¬øTe refieres a otro grupo similar?

Los grupos que tengo con m√°s informaci√≥n son: OGAS, TEPEYAC, TEC, EXPO, EFM, CRR, GRUPO SALTILLO üòä`;
    }

    let response = `üìç **Ubicaci√≥n del Grupo ${data.grupo.toUpperCase()}**\n\n`;
    response += `¬°Perfecto! Te muestro d√≥nde opera **${data.grupo}**:\n\n`;
    
    data.estados.forEach((estado, index) => {
      response += `**${index + 1}. ${estado.estado}**\n`;
      response += `   üè™ ${estado.sucursales} sucursales\n`;
      response += `   üìä Promedio: ${estado.promedio}%\n\n`;
    });
    
    response += `üí° **Mi an√°lisis:** ${data.grupo} opera en ${data.total_estados} estado${data.total_estados > 1 ? 's' : ''} `;
    
    if (data.total_estados === 1) {
      response += `concentrando toda su operaci√≥n en ${data.estados[0].estado}.`;
    } else {
      const mejorEstado = data.estados.reduce((prev, current) => 
        parseFloat(prev.promedio) > parseFloat(current.promedio) ? prev : current
      );
      response += `siendo ${mejorEstado.estado} su mejor desempe√±o con ${mejorEstado.promedio}%.`;
    }
    
    response += `\n\n¬øTe gustar√≠a que analice el desempe√±o espec√≠fico de alg√∫n estado o veamos qu√© sucursales tiene ${data.grupo}? ü§î`;
    
    return response;
  }

  generatePerformanceResponse(data, originalQuestion) {
    if (!data.found) {
      return `ü§î No pude obtener el an√°lisis de desempe√±o para **${data.grupo}**.

¬øTe refieres a alguno de estos grupos?
‚Ä¢ OGAS (nuestro l√≠der)
‚Ä¢ TEPEYAC (grupo grande)
‚Ä¢ TEC (rendimiento s√≥lido)
‚Ä¢ EXPO, EFM, CRR, GRUPO SALTILLO

¬°Preg√∫ntame por cualquiera! üòä`;
    }

    let response = `üìä **Desempe√±o del Grupo ${data.grupo.toUpperCase()}**\n\n`;
    
    if (data.businessContext) {
      const ctx = data.businessContext;
      response += `üéØ **Posici√≥n en el ranking:** #${ctx.position_in_ranking} de 20 grupos\n`;
      response += `‚≠ê **Percentil:** ${ctx.percentile} (${ctx.status.toUpperCase()})\n`;
      response += `üìà **Promedio general:** ${ctx.promedio}%\n`;
      response += `üè¢ **Red:** ${ctx.sucursales} sucursales, ${ctx.supervisiones} supervisiones\n\n`;
      
      response += `üíº **Contexto empresarial:** ${ctx.performance_context}\n\n`;
    }
    
    if (data.opportunities && data.opportunities.length > 0) {
      response += `üéØ **Sus principales oportunidades:**\n`;
      data.opportunities.slice(0, 3).forEach((opp, index) => {
        const emoji = index === 0 ? 'üî¥' : index === 1 ? 'üü°' : 'üü†';
        response += `${emoji} **${opp.area}**: ${opp.promedio}%\n`;
      });
      response += `\n`;
    }
    
    if (data.businessContext) {
      response += `üí° **Mi recomendaci√≥n:** ${data.businessContext.recommendation}\n\n`;
    }
    
    response += `¬øTe interesa que profundice en alg√∫n √°rea espec√≠fica o comparemos ${data.grupo} con otros grupos? üöÄ`;
    
    return response;
  }

  generateHelpResponse(originalQuestion) {
    return `ü§î **¬°Hola! Soy Ana, tu analista experta de El Pollo Loco**

No estoy segura de entender exactamente lo que necesitas con: "${originalQuestion}"

**¬øTe refieres a algo como esto?** 
‚Ä¢ "¬øCu√°les son las sucursales de TEPEYAC y c√≥mo han evolucionado?"
‚Ä¢ "¬øQu√© oportunidades de mejora tiene OGAS?"  
‚Ä¢ "¬øDame el top 5 de grupos este trimestre?"
‚Ä¢ "¬øEl grupo EFM d√≥nde est√° ubicado?"
‚Ä¢ "¬øCu√°les son las calificaciones del grupo CRR?"

**Grupos que conozco muy bien:**
OGAS, TEPEYAC, TEC, EXPO, EFM, CRR, GRUPO SALTILLO, PLOG QUERETARO, RAP, y muchos m√°s...

¬°Preg√∫ntame lo que necesites! üòä`;
  }

  // ULTRA INTELLIGENCE STATUS CHECK
  getIntelligenceStatus() {
    return {
      training_complete: this.trainingComplete,
      is_training: this.isTraining,
      intelligence_level: this.personality.intelligence_level,
      database_knowledge: this.personality.database_knowledge,
      last_training: this.ultraIntelligence.lastTrainingUpdate,
      dynamic_queries_enabled: true,
      capabilities: this.personality.capabilities
    };
  }
  
  // FORCE RETRAINING (if needed)
  async forceRetraining() {
    console.log('üîÑ FORZANDO REENTRENAMIENTO DE ANA...');
    this.trainingComplete = false;
    await this.initializeUltraIntelligence();
    return this.getIntelligenceStatus();
  }

  saveConversationMemory(chatId, question, response, intent) {
    if (!this.conversationMemory.has(chatId)) {
      this.conversationMemory.set(chatId, []);
    }
    
    const conversation = this.conversationMemory.get(chatId);
    conversation.push({
      timestamp: new Date(),
      question: question,
      response: response,
      intent: intent,
      success: true,
      intelligence_used: this.trainingComplete ? 'ultra_intelligence' : 'fallback_agentic'
    });
    
    // Mantener solo las √∫ltimas 15 interacciones (m√°s memoria para ultra inteligencia)
    if (conversation.length > 15) {
      conversation.shift();
    }
    
    console.log(`üíæ Memoria ANA guardada para chat ${chatId}: ${conversation.length} interacciones (Ultra: ${this.trainingComplete})`);
  }
}

module.exports = AgenticDirector;